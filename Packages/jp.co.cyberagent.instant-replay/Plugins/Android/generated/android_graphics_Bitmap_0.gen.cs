// --------------------------------------------------------------
// Copyright 2025 CyberAgent, Inc.
// --------------------------------------------------------------

// <auto-generated />
#nullable enable
#pragma warning disable CS0108
#pragma warning disable CS0162
#pragma warning disable CS0114
using global::System.Linq;
namespace @android.@graphics
{
public partial interface @Bitmap : global::@java.@lang.@Object, global::@android.@os.@Parcelable
{
    private static nint __ABG__Class_backingField;
    internal static nint __ABG__Class
    {
        get
        {
            var existing = __ABG__Class_backingField; 
            if (existing != 0) return existing;
        
            var ptr = global::UnityEngine.AndroidJNI.NewGlobalRef(global::UnityEngine.AndroidJNI.FindClass(@"android/graphics/Bitmap"));
            existing = global::System.Threading.Interlocked.CompareExchange(ref __ABG__Class_backingField, ptr, (nint)0);
            if (existing != (nint)0)
            {
                global::UnityEngine.AndroidJNI.DeleteGlobalRef(ptr);
                return existing;
            }
            return ptr;
        }
    }
    public static @Bitmap? UnsafeFromRawObjectAndDeleteLocalRef(nint rawObject)
    {
        if (rawObject == (nint)0) return null;
        try
        {
            return new @__ABG__Anonymous(rawObject);
        }
        finally
        {
            global::UnityEngine.AndroidJNI.DeleteLocalRef(rawObject);
        }
    }

    public static @Bitmap? UnsafeFromRawObject(nint rawObject)
    {
        if (rawObject == (nint)0) return null;
        return new @__ABG__Anonymous(rawObject);
    }

    public static @Bitmap? FromRawObject(nint rawObject)
    {
        if (rawObject == (nint)0) return null;
        return !global::UnityEngine.AndroidJNI.IsAssignableFrom(global::UnityEngine.AndroidJNI.GetObjectClass(rawObject), __ABG__Class) ? null : new @__ABG__Anonymous(rawObject);
    }

    public static @Bitmap? FromRawObject(global::AndroidBindgen.IAndroidJavaObject source) => source != null ? FromRawObject(source.GetRawObject()) : null;
internal class __ABG__Anonymous :  global::@java.@lang.@Object.__ABG__Anonymous, @Bitmap
{
    internal @__ABG__Anonymous(nint rawObject) : base(rawObject) { }
}
}
}
namespace android.graphics
{
public static partial class BindingExtensions
{

    private static nint p___ABG__Class_copyPixelsToBuffer_0;

    /// <summary>
    ///     copyPixelsToBuffer
    /// </summary>
    /// <param name="@dst">value of @dst</param>
    public static void @copyPixelsToBuffer(this @android.@graphics.@Bitmap @this, @java.@nio.@Buffer? @dst)
    {
        if (p___ABG__Class_copyPixelsToBuffer_0 == (nint)0) p___ABG__Class_copyPixelsToBuffer_0 = global::UnityEngine.AndroidJNI.GetMethodID(@android.@graphics.@Bitmap.__ABG__Class, @"copyPixelsToBuffer", @"(Ljava/nio/Buffer;)V");
        global::System.Span<global::UnityEngine.jvalue> __ABG__args = stackalloc UnityEngine.jvalue[1];
        try
        {
            __ABG__args[0] = new global::UnityEngine.jvalue() { l = @dst?.GetRawObject() ?? global::System.IntPtr.Zero };
            global::UnityEngine.AndroidJNI.CallVoidMethod(@this.GetRawObject(), p___ABG__Class_copyPixelsToBuffer_0, __ABG__args);
        }
        finally
        {
            global::AndroidBindgen.AndroidJNIEx.CheckException();
        }
    }

    private static nint p___ABG__Class_getWidth_0;

    /// <summary>
    ///     getWidth
    /// </summary>
    /// <returns>value of int</returns>
    public static int @getWidth(this @android.@graphics.@Bitmap @this)
    {
        if (p___ABG__Class_getWidth_0 == (nint)0) p___ABG__Class_getWidth_0 = global::UnityEngine.AndroidJNI.GetMethodID(@android.@graphics.@Bitmap.__ABG__Class, @"getWidth", @"()I");
        global::System.Span<global::UnityEngine.jvalue> __ABG__args = global::System.Span<global::UnityEngine.jvalue>.Empty;
        try
        {
            return global::UnityEngine.AndroidJNI.CallIntMethod(@this.GetRawObject(), p___ABG__Class_getWidth_0, __ABG__args);
        }
        finally
        {
            global::AndroidBindgen.AndroidJNIEx.CheckException();
        }
    }

    private static nint p___ABG__Class_getByteCount_0;

    /// <summary>
    ///     getByteCount
    /// </summary>
    /// <returns>value of int</returns>
    public static int @getByteCount(this @android.@graphics.@Bitmap @this)
    {
        if (p___ABG__Class_getByteCount_0 == (nint)0) p___ABG__Class_getByteCount_0 = global::UnityEngine.AndroidJNI.GetMethodID(@android.@graphics.@Bitmap.__ABG__Class, @"getByteCount", @"()I");
        global::System.Span<global::UnityEngine.jvalue> __ABG__args = global::System.Span<global::UnityEngine.jvalue>.Empty;
        try
        {
            return global::UnityEngine.AndroidJNI.CallIntMethod(@this.GetRawObject(), p___ABG__Class_getByteCount_0, __ABG__args);
        }
        finally
        {
            global::AndroidBindgen.AndroidJNIEx.CheckException();
        }
    }
}
}
